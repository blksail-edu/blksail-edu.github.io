"use strict";(self.webpackChunkblksail_edu_github_io=self.webpackChunkblksail_edu_github_io||[]).push([[70],{4137:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},l=Object.keys(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)n=l[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=i.createContext({}),d=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=d(e.components);return i.createElement(p.Provider,{value:t},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),s=d(n),u=a,k=s["".concat(p,".").concat(u)]||s[u]||m[u]||l;return n?i.createElement(k,r(r({ref:t},c),{},{components:n})):i.createElement(k,r({ref:t},c))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,r=new Array(l);r[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[s]="string"==typeof e?e:a,r[1]=o;for(var d=2;d<l;d++)r[d]=n[d];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7895:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var i=n(7462),a=(n(7294),n(4137));const l={sidebar_position:5},r="C++",o={unversionedId:"module/programming_cpp",id:"module/programming_cpp",title:"C++",description:"<iframe",source:"@site/docs/0-module/programming_cpp.mdx",sourceDirName:"0-module",slug:"/module/programming_cpp",permalink:"/docs/module/programming_cpp",draft:!1,editUrl:"https://github.com/blksail-edu/blksail-edu.github.io/tree/main/docs/0-module/programming_cpp.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Python",permalink:"/docs/module/programming_python"},next:{title:"Module 1 - Underwater Robotics",permalink:"/docs/category/module-1---underwater-robotics"}},p={},d=[{value:"Compiler",id:"compiler",level:2},{value:"CMake",id:"cmake",level:2},{value:"<code>cpp-intro</code> Project",id:"cpp-intro-project",level:2},{value:"<code>cpp-intro</code> Project Structure",id:"cpp-intro-project-structure",level:3},{value:"<code>CMakeLists.txt</code> File",id:"cmakeliststxt-file",level:3},{value:"<code>main.cpp</code> File",id:"maincpp-file",level:3},{value:"Functions",id:"functions",level:2}],c={toc:d},s="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(s,(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"c"},"C++"),(0,a.kt)("iframe",{src:"https://blksail-edu.github.io/slides/cpp",width:"100%",height:320,frameborder:"0",allowfullscreen:!0}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/C%2B%2B"},"C++")," is a general-purpose programming language created by ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/C%2B%2B"},"Bjarne Stroustrup"),' as an extension of the C programming language, or "C with Classes".\nThe language has expanded significantly over time, and modern C++ now has object-oriented, generic, and functional features in addition to facilities for low-level memory manipulation.\nIt is almost always implemented as a compiled language, and many vendors provide C++ compilers, including the Free Software Foundation, LLVM, Microsoft, Intel, Oracle, and IBM, so it is available on many platforms.'),(0,a.kt)("h2",{id:"compiler"},"Compiler"),(0,a.kt)("p",null,"The C++ language is standardized by the ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/International_Organization_for_Standardization"},"International Organization for Standardization (ISO)")," and the latest standard version is ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/C%2B%2B20"},"C++20"),".\nThe most widely used compiler is ",(0,a.kt)("a",{parentName:"p",href:"https://gcc.gnu.org/"},"GCC"),", which is the default compiler on most Linux distributions.\nThe ",(0,a.kt)("a",{parentName:"p",href:"https://clang.llvm.org/"},"Clang")," compiler is also popular, and it is the default compiler on macOS.\nThe ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Visual_C%2B%2B"},"MSVC")," compiler is the default compiler on Windows, and it is also available on Linux and macOS."),(0,a.kt)("p",null,"In this course, we will be using Clang as the compiler.\nTo install Clang on the RPi, run the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt update\nsudo apt install clang\n")),(0,a.kt)("h2",{id:"cmake"},"CMake"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://cmake.org/"},"CMake")," is an open-source, cross-platform family of tools designed to build, test and package software.\nCMake is used to control the software compilation process using simple platform and compiler independent configuration files, and generate native makefiles and workspaces that can be used in the compiler environment of your choice.\nBecause CMake generates native makefiles and workspaces, you can open the project in your preferred development environment and compiler."),(0,a.kt)("p",null,"To install CMake on the RPi, run the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo apt update\nsudo apt install cmake\n")),(0,a.kt)("h2",{id:"cpp-intro-project"},(0,a.kt)("inlineCode",{parentName:"h2"},"cpp-intro")," Project"),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/blksail-edu/cpp-intro"},(0,a.kt)("inlineCode",{parentName:"a"},"cpp-intro"))," project is a simple C++ project that can be used as a template for your own projects.\nWe will be using this project to demonstrate how to use CMake to build a C++ project."),(0,a.kt)("p",null,"First fork the repository, and clone it in the RPi:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~ # go to home directory\ngit clone REPO_URL # replace REPO_URL with your forked repository URL\n")),(0,a.kt)("p",null,"You should now have a ",(0,a.kt)("inlineCode",{parentName:"p"},"cpp-intro")," directory in your home directory.\nLet's go into the directory and build the project:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cd cpp-intro # go into the directory\nmkdir build # create a build directory\ncd build # go into the build directory\ncmake .. # generate the build files\ncmake --build . # build the project\n")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"A good practice is to separate the source code from the build files.\nThis way, you can easily delete the build files without affecting the source code.\nThis is why we created a ",(0,a.kt)("inlineCode",{parentName:"p"},"build")," directory and ran ",(0,a.kt)("inlineCode",{parentName:"p"},"cmake ..")," inside the directory.")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"VSCode has extensions that can help you build and debug C++ projects.\n",(0,a.kt)("a",{parentName:"p",href:"https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools-extension-pack"},"C/C++ Extension Pack")," is a good extension pack that includes the C/C++ extension and other useful extensions.")),(0,a.kt)("p",null,"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"build")," directory, you should see a ",(0,a.kt)("inlineCode",{parentName:"p"},"MyExecutable")," executable.\nYou can run the executable by running ",(0,a.kt)("inlineCode",{parentName:"p"},"./MyExecutable")," while in the ",(0,a.kt)("inlineCode",{parentName:"p"},"build")," directory."),(0,a.kt)("h3",{id:"cpp-intro-project-structure"},(0,a.kt)("inlineCode",{parentName:"h3"},"cpp-intro")," Project Structure"),(0,a.kt)("p",null,"Go ahead an open the ",(0,a.kt)("inlineCode",{parentName:"p"},"cpp-intro")," project in VSCode."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"In the terminal, you can run ",(0,a.kt)("inlineCode",{parentName:"p"},"code .")," to open the current directory in VSCode.")),(0,a.kt)("p",null,"You should see the following files and directories:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"build/\n.gitignore\nCMakeLists.txt\nmain.cpp\n")),(0,a.kt)("p",null,"Here:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"build")," directory is where the build files are generated."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},".gitignore")," file tells Git to ignore certain files and directories."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"CMakeLists.txt")," file is the CMake configuration file."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"main.cpp")," file is the source code of the project.")),(0,a.kt)("h3",{id:"cmakeliststxt-file"},(0,a.kt)("inlineCode",{parentName:"h3"},"CMakeLists.txt")," File"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"CMakeLists.txt")," file is the CMake configuration file.\nIt tells CMake how to build the project.\nLet's take a look at the ",(0,a.kt)("inlineCode",{parentName:"p"},"CMakeLists.txt")," file in the ",(0,a.kt)("inlineCode",{parentName:"p"},"cpp-intro")," project:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cmake"},"cmake_minimum_required(VERSION 3.15)\n\nproject(MyProject VERSION 1.0)\n\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED True)\n\n\nadd_executable(MyExecutable main.cpp)\n")),(0,a.kt)("p",null,"Here:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The first two lines tell CMake the minimum version of CMake required and the name and version of the project."),(0,a.kt)("li",{parentName:"ul"},"The next two lines tell CMake to use C++17 and that C++17 is required."),(0,a.kt)("li",{parentName:"ul"},"The last line tells CMake to build an executable called ",(0,a.kt)("inlineCode",{parentName:"li"},"MyExecutable")," from the ",(0,a.kt)("inlineCode",{parentName:"li"},"main.cpp")," file.")),(0,a.kt)("admonition",{title:"Check-off",type:"warning"},(0,a.kt)("ul",{parentName:"admonition",className:"contains-task-list"},(0,a.kt)("li",{parentName:"ul",className:"task-list-item"},(0,a.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Change the project name to ",(0,a.kt)("inlineCode",{parentName:"li"},"MyFirstProject"),"."),(0,a.kt)("li",{parentName:"ul",className:"task-list-item"},(0,a.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Change the project version to ",(0,a.kt)("inlineCode",{parentName:"li"},"0.1"),"."),(0,a.kt)("li",{parentName:"ul",className:"task-list-item"},(0,a.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Change the executable name to ",(0,a.kt)("inlineCode",{parentName:"li"},"MyFirstExecutable"),"."),(0,a.kt)("li",{parentName:"ul",className:"task-list-item"},(0,a.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Show your TA that you can build the ",(0,a.kt)("inlineCode",{parentName:"li"},"cpp-intro")," project."))),(0,a.kt)("h3",{id:"maincpp-file"},(0,a.kt)("inlineCode",{parentName:"h3"},"main.cpp")," File"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"main.cpp")," file is the source code of the project.\nLet's take a look at the ",(0,a.kt)("inlineCode",{parentName:"p"},"main.cpp")," file in the ",(0,a.kt)("inlineCode",{parentName:"p"},"cpp-intro")," project:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n\nint main()\n{\n  std::cout << "Hello, world!" << std::endl;\n\n  int x = 5;\n  int y = 7;\n  std::cout << "The sum of " << x << " and " << y << " is " << x + y << std::endl;\n\n  return 0;\n}\n')),(0,a.kt)("p",null,"Here:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The first line tells the compiler to include the ",(0,a.kt)("inlineCode",{parentName:"li"},"iostream")," header file."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"main")," function is the entry point of the program."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"std::cout")," object is used to print to the console."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"std::endl")," object is used to print a new line.")),(0,a.kt)("admonition",{title:"Check-off",type:"warning"},(0,a.kt)("ul",{parentName:"admonition",className:"contains-task-list"},(0,a.kt)("li",{parentName:"ul",className:"task-list-item"},(0,a.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Modify the ",(0,a.kt)("inlineCode",{parentName:"li"},"main.cpp")," file to print your name and classroom."),(0,a.kt)("li",{parentName:"ul",className:"task-list-item"},(0,a.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Create a new variable called ",(0,a.kt)("inlineCode",{parentName:"li"},"z")," and print the sum of ",(0,a.kt)("inlineCode",{parentName:"li"},"x"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"y"),", and ",(0,a.kt)("inlineCode",{parentName:"li"},"z"),"."),(0,a.kt)("li",{parentName:"ul",className:"task-list-item"},(0,a.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Create a new variable called ",(0,a.kt)("inlineCode",{parentName:"li"},"w")," and print the product of ",(0,a.kt)("inlineCode",{parentName:"li"},"x"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"y"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"z"),", and ",(0,a.kt)("inlineCode",{parentName:"li"},"w"),"."),(0,a.kt)("li",{parentName:"ul",className:"task-list-item"},(0,a.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Create a new variable called ",(0,a.kt)("inlineCode",{parentName:"li"},"v")," and print the division of ",(0,a.kt)("inlineCode",{parentName:"li"},"x"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"y")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"v"),"."),(0,a.kt)("li",{parentName:"ul",className:"task-list-item"},(0,a.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Show your TA that you can build and run the ",(0,a.kt)("inlineCode",{parentName:"li"},"cpp-intro")," project."))),(0,a.kt)("h2",{id:"functions"},"Functions"),(0,a.kt)("p",null,"A function is a block of code that performs a specific task.\nA function can be called from anywhere in the program.\nA function can optionally take parameters and return a value."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'// function declaration\nint add(int x, int y);\n\n// function definition\nint add(int x, int y)\n{\n  return x + y;\n}\n\nint main()\n{\n  int x = 5;\n  int y = 7;\n  int z = add(x, y); // call the add function\n  std::cout << "The sum of " << x << " and " << y << " is " << z << std::endl;\n\n  return 0;\n}\n')),(0,a.kt)("p",null,"Here:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"add")," function takes two parameters ",(0,a.kt)("inlineCode",{parentName:"li"},"x")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"y")," and returns the sum of the two parameters."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"add")," function is called from the ",(0,a.kt)("inlineCode",{parentName:"li"},"main")," function.")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("ol",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"The ",(0,a.kt)("inlineCode",{parentName:"p"},"add")," function is declared before the ",(0,a.kt)("inlineCode",{parentName:"p"},"main")," function.\nThis is because the ",(0,a.kt)("inlineCode",{parentName:"p"},"add")," function is called from the ",(0,a.kt)("inlineCode",{parentName:"p"},"main")," function.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Usually, the function declaration is put in a header file and the function definition is put in a source file.")))),(0,a.kt)("admonition",{title:"Check-off",type:"warning"},(0,a.kt)("ul",{parentName:"admonition",className:"contains-task-list"},(0,a.kt)("li",{parentName:"ul",className:"task-list-item"},(0,a.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Write the following functions:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int subtract(int x, int y)")," that returns the difference of ",(0,a.kt)("inlineCode",{parentName:"li"},"x")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"y"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int multiply(int x, int y)")," that returns the product of ",(0,a.kt)("inlineCode",{parentName:"li"},"x")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"y"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"int divide(int x, int y)")," that returns the division of ",(0,a.kt)("inlineCode",{parentName:"li"},"x")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"y"),"."))),(0,a.kt)("li",{parentName:"ul",className:"task-list-item"},(0,a.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Show your TA that you can build and run the ",(0,a.kt)("inlineCode",{parentName:"li"},"cpp-intro")," project."))))}m.isMDXComponent=!0}}]);