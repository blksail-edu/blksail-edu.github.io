"use strict";(self.webpackChunkblksail_edu_github_io=self.webpackChunkblksail_edu_github_io||[]).push([[770],{4137:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),c=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(o.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),u=r,h=m["".concat(o,".").concat(u)]||m[u]||d[u]||i;return n?a.createElement(h,l(l({ref:t},p),{},{components:n})):a.createElement(h,l({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[m]="string"==typeof e?e:r,l[1]=s;for(var c=2;c<i;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3737:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(4137));const i={sidebar_position:6},l="Networking",s={unversionedId:"module/networking",id:"module/networking",title:"Networking",description:"<iframe",source:"@site/docs/0-module/networking.mdx",sourceDirName:"0-module",slug:"/module/networking",permalink:"/docs/module/networking",draft:!1,editUrl:"https://github.com/blksail-edu/blksail-edu.github.io/tree/main/docs/0-module/networking.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"C++",permalink:"/docs/module/programming_cpp"},next:{title:"Module 1 - Underwater Robotics",permalink:"/docs/category/module-1---underwater-robotics"}},o={},c=[{value:"OSI Model",id:"osi-model",level:2},{value:"DNS",id:"dns",level:2},{value:"mDNS",id:"mdns",level:3},{value:"Ethernet",id:"ethernet",level:2},{value:"MAC Address",id:"mac-address",level:2},{value:"IP Address",id:"ip-address",level:2},{value:"Ports",id:"ports",level:2},{value:"Sockets",id:"sockets",level:2},{value:"Packets",id:"packets",level:2},{value:"Practice Problems",id:"practice-problems",level:2},{value:"Problem 1: Chat Application",id:"problem-1-chat-application",level:3},{value:"Requirements",id:"requirements",level:4},{value:"Hints",id:"hints",level:4}],p={toc:c},m="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"networking"},"Networking"),(0,r.kt)("iframe",{src:"https://blksail-edu.github.io/slides/networking/",width:"100%",height:320,frameborder:"0",allowfullscreen:!0}),(0,r.kt)("h2",{id:"osi-model"},"OSI Model"),(0,r.kt)("h2",{id:"dns"},"DNS"),(0,r.kt)("h3",{id:"mdns"},"mDNS"),(0,r.kt)("h2",{id:"ethernet"},"Ethernet"),(0,r.kt)("h2",{id:"mac-address"},"MAC Address"),(0,r.kt)("h2",{id:"ip-address"},"IP Address"),(0,r.kt)("h2",{id:"ports"},"Ports"),(0,r.kt)("h2",{id:"sockets"},"Sockets"),(0,r.kt)("h2",{id:"packets"},"Packets"),(0,r.kt)("h2",{id:"practice-problems"},"Practice Problems"),(0,r.kt)("h3",{id:"problem-1-chat-application"},"Problem 1: Chat Application"),(0,r.kt)("p",null,"In Python, implement a chat application (server and client) that allows users to send messages in a common chat room."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Fork the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/blksail-edu/simple-chat-app"},"chat application")," repository and clone it to your local machine."),(0,r.kt)("p",{parentName:"admonition"},"You will be working in a team setup, so make sure to coordinate with your team members.\nOne fork per team.\nEach team member should be working on a separate branch.")),(0,r.kt)("h4",{id:"requirements"},"Requirements"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The server should be able to handle multiple clients at once.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The server should broadcast messages to all clients.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The server should send a message to the chatroom when a new client joins the chat room.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The server should send a message to the chatroom when a client leaves the chat room.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The client should be able to send messages to the server.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The client should be able to receive messages from the server.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The client should be able to gracefully exit the chat room.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The client should have a username, which is sent to the server when the client joins the chat room.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The server should keep track of all clients in the chat room.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The client is defined by:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"username"),(0,r.kt)("li",{parentName:"ul"},"IP address"),(0,r.kt)("li",{parentName:"ul"},"password"),(0,r.kt)("li",{parentName:"ul"},"unique ID"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The server is defined by:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"IP address"),(0,r.kt)("li",{parentName:"ul"},"port"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A message in the chat room is defined by:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"sender (the client ID)"),(0,r.kt)("li",{parentName:"ul"},"payload (the message)"),(0,r.kt)("li",{parentName:"ul"},"timestamp"),(0,r.kt)("li",{parentName:"ul"},"chatroom ID"),(0,r.kt)("li",{parentName:"ul"},"unique ID"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The chat room is defined by:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"name"),(0,r.kt)("li",{parentName:"ul"},"unique ID")))),(0,r.kt)("h4",{id:"hints"},"Hints"),(0,r.kt)("p",null,"Here's a class diagram to help you get started:"),(0,r.kt)("mermaid",{value:"classDiagram\n  class Client {\n    +String: username\n    +String: ip_address\n    +String: password\n    +String: uuid\n  }\n\n  class Server {\n    +String: ip_address\n    +Number: port\n  }\n\n  class Message {\n    +String: sender\n    +String: payload\n    +Date: timestamp\n    +String: chatroom_id\n    +String: uuid\n  }\n\n  class Chatroom {\n    +String: name\n    +String: uuid\n    +List<Message>: messages\n  }\n"}),(0,r.kt)("p",null,"You should at least have the following files:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"chat_server.py"),"\nThis is the main file that runs the server."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"chat_client.py"),"\nThis is the main file that runs the client."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"client.py"),"\nThis is the client class."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"server.py"),"\nThis is the server class."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"message.py"),"\nThis is the message class."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"chatroom.py"),"\nThis is the chatroom class.")),(0,r.kt)("p",null,"Here's a sequence diagram to help you get started:"),(0,r.kt)("mermaid",{value:"sequenceDiagram\n    participant C0 as Client 0\n    participant S as Server\n    participant C1 as Client 1\n\n    C0->>S: Authenticate\n    activate S\n    S->>C0: Authenticate OK\n    S->>C0: Broadcast New Client\n    deactivate S\n\n    C0->>S: Send Message\n    activate S\n    S->>C0: Message Received\n    S->>C0: Broadcast Message\n    deactivate S\n\n    C1->>S: Authenticate\n    activate S\n    S->>C1: Authenticate OK\n    S->>C0: Broadcast New Client\n    S->>C1: Broadcast New Client\n    deactivate S\n\n    C1->>S: Send Message\n    activate S\n    S->>C1: Message Received\n    S->>C0: Broadcast Message\n    S->>C1: Broadcast Message\n    deactivate S\n\n    C0->>S: Disconnect\n    activate S\n    S->>C0: Disconnect OK\n    S->>C1: Broadcast Client Disconnected\n    deactivate S\n\n    C1->>S: Disconnect\n    activate S\n    S->>C1: Disconnect OK\n    deactivate S"}))}d.isMDXComponent=!0}}]);