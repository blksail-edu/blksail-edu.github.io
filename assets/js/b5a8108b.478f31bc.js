"use strict";(self.webpackChunkblksail_edu_github_io=self.webpackChunkblksail_edu_github_io||[]).push([[9946],{7227:(e,n,s)=>{s.d(n,{A:()=>a});s(96540);var i=s(34164);const r={tabItem:"tabItem_Ymn6"};var o=s(74848);function a({children:e,hidden:n,className:s}){return(0,o.jsx)("div",{role:"tabpanel",className:(0,i.A)(r.tabItem,s),hidden:n,children:e})}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var i=s(96540);const r={},o=i.createContext(r);function a(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(o.Provider,{value:n},e.children)}},49489:(e,n,s)=>{s.d(n,{A:()=>y});var i=s(96540),r=s(34164),o=s(24245),a=s(56347),l=s(36494),t=s(62814),c=s(45167),d=s(69900);function h(e){return i.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function u(e){const{values:n,children:s}=e;return(0,i.useMemo)(()=>{const e=n??function(e){return h(e).map(({props:{value:e,label:n,attributes:s,default:i}})=>({value:e,label:n,attributes:s,default:i}))}(s);return function(e){const n=(0,c.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,s])}function p({value:e,tabValues:n}){return n.some(n=>n.value===e)}function m({queryString:e=!1,groupId:n}){const s=(0,a.W6)(),r=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,t.aZ)(r),(0,i.useCallback)(e=>{if(!r)return;const n=new URLSearchParams(s.location.search);n.set(r,e),s.replace({...s.location,search:n.toString()})},[r,s])]}function x(e){const{defaultValue:n,queryString:s=!1,groupId:r}=e,o=u(e),[a,t]=(0,i.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!p({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const s=n.find(e=>e.default)??n[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:o})),[c,h]=m({queryString:s,groupId:r}),[x,g]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[s,r]=(0,d.Dv)(n);return[s,(0,i.useCallback)(e=>{n&&r.set(e)},[n,r])]}({groupId:r}),b=(()=>{const e=c??x;return p({value:e,tabValues:o})?e:null})();(0,l.A)(()=>{b&&t(b)},[b]);return{selectedValue:a,selectValue:(0,i.useCallback)(e=>{if(!p({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);t(e),h(e),g(e)},[h,g,o]),tabValues:o}}var g=s(11062);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=s(74848);function f({className:e,block:n,selectedValue:s,selectValue:i,tabValues:a}){const l=[],{blockElementScrollPositionUntilNextRender:t}=(0,o.a_)(),c=e=>{const n=e.currentTarget,r=l.indexOf(n),o=a[r].value;o!==s&&(t(n),i(o))},d=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const s=l.indexOf(e.currentTarget)+1;n=l[s]??l[0];break}case"ArrowLeft":{const s=l.indexOf(e.currentTarget)-1;n=l[s]??l[l.length-1];break}}n?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":n},e),children:a.map(({value:e,label:n,attributes:i})=>(0,j.jsx)("li",{role:"tab",tabIndex:s===e?0:-1,"aria-selected":s===e,ref:e=>{l.push(e)},onKeyDown:d,onClick:c,...i,className:(0,r.A)("tabs__item",b.tabItem,i?.className,{"tabs__item--active":s===e}),children:n??e},e))})}function v({lazy:e,children:n,selectedValue:s}){const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=o.find(e=>e.props.value===s);return e?(0,i.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:o.map((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==s}))})}function w(e){const n=x(e);return(0,j.jsxs)("div",{className:(0,r.A)("tabs-container",b.tabList),children:[(0,j.jsx)(f,{...n,...e}),(0,j.jsx)(v,{...n,...e})]})}function y(e){const n=(0,g.A)();return(0,j.jsx)(w,{...e,children:h(e.children)},String(n))}},73258:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>t,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"module/sensor_driven_autonomy","title":"3.3 Sensor-Driven Autonomy","description":"Gazebo","source":"@site/docs/3-module/4_sensor_driven_autonomy.mdx","sourceDirName":"3-module","slug":"/module/sensor_driven_autonomy","permalink":"/docs/module/sensor_driven_autonomy","draft":false,"unlisted":false,"editUrl":"https://github.com/blksail-edu/blksail-edu.github.io/tree/main/docs/3-module/4_sensor_driven_autonomy.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"3.2 Computer Vision","permalink":"/docs/module/computer_vision"},"next":{"title":"General Knowledge","permalink":"/docs/category/general-knowledge"}}');var r=s(74848),o=s(28453),a=s(49489),l=s(7227);s(90547);const t={sidebar_position:3},c="3.3 Sensor-Driven Autonomy",d={},h=[{value:"Gazebo",id:"gazebo",level:2},{value:"Installation",id:"installation",level:3},{value:"Testing",id:"testing",level:3},{value:"BlueROV2 Simulation",id:"bluerov2-simulation",level:2},{value:"Installation",id:"installation-1",level:3},{value:"Testing",id:"testing-1",level:3},{value:"Environment Setup",id:"environment-setup",level:3},{value:"Raspberry Pi Configuration",id:"raspberry-pi-configuration",level:4},{value:"Laptop Configuration",id:"laptop-configuration",level:4},{value:"WSL Network Mode",id:"wsl-network-mode",level:5},{value:"WSL Firewall Access",id:"wsl-firewall-access",level:5},{value:"ROS 2 Gazebo Bridge",id:"ros-2-gazebo-bridge",level:2},{value:"ArduSub with Gazebo",id:"ardusub-with-gazebo",level:2},{value:"Simulating 1x ROV",id:"simulating-1x-rov",level:3},{value:"Simulating 2x ROV",id:"simulating-2x-rov",level:3}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"33-sensor-driven-autonomy",children:"3.3 Sensor-Driven Autonomy"})}),"\n",(0,r.jsx)(n.h2,{id:"gazebo",children:"Gazebo"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://gazebosim.org/",children:"Gazebo"})," is a set of open source tools for simulating robots in an environment.\nIt is commonly used in robotics research and education."]}),"\n",(0,r.jsx)(n.p,{children:"We will be using Gazebo to simulate the BlueROV2 robot in a virtual pool environment."}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["We will be using ",(0,r.jsx)(n.code,{children:"Gazebo Harmonic"}),", the latest LTS version of Gazebo."]})}),"\n",(0,r.jsx)(n.h3,{id:"installation",children:"Installation"}),"\n",(0,r.jsxs)(n.p,{children:["The documentation for installing Gazebo can be found ",(0,r.jsx)(n.a,{href:"https://gazebosim.org/docs/garden/install",children:"here"}),'.\nSee "',(0,r.jsx)(n.strong,{children:"Binary Installation"}),'" for instructions on installing Gazebo on your operating system.\nBelow is a summary of the steps.']}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"Only Ubuntu is fully supported by Gazebo, and macOS is partially supported.\nOn Windows the simulation will run in the WSL environment."})}),"\n",(0,r.jsxs)(a.A,{groupId:"operating-systems",children:[(0,r.jsxs)(l.A,{value:"macos",label:"macOS",children:[(0,r.jsx)(n.p,{children:"First we need to install ruby from Homebrew:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"brew install ruby\n"})}),(0,r.jsx)(n.p,{children:"Then we have to add the Homebrew Ruby to our path:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"echo 'export PATH=\"$(brew --prefix)/opt/ruby/bin:$PATH\"' >> ~/.zshrc\n"})}),(0,r.jsxs)(n.p,{children:["Now, we add the ",(0,r.jsx)(n.code,{children:"osrf/simulation"})," tap:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"brew tap osrf/simulation\n"})}),(0,r.jsxs)(n.admonition,{title:"Apple Silicon-based Macs",type:"tip",children:[(0,r.jsx)(n.p,{children:"For Apple Silicon-based Macs, we need to modify the Formulae before installing Gazebo."}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cd /opt/homebrew/Library/Taps/osrf/homebrew-simulation/Formula\nsed -i '' 's|cmake_args << \"-DCMAKE_INSTALL_RPATH=#{rpath}\"|cmake_args << \"-DCMAKE_INSTALL_RPATH=#{rpath};/opt/homebrew/lib\"|' *.rb\n"})})]}),(0,r.jsx)(n.p,{children:"Next we install Gazebo:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"brew install gz-harmonic\n"})})]}),(0,r.jsxs)(l.A,{value:"ubuntu",label:"Ubuntu",children:[(0,r.jsxs)(n.p,{children:["First, ",(0,r.jsx)(n.strong,{children:"in a WSL terminal"}),", update and install dependencies:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"sudo apt update\nsudo apt install lsb-release wget gnupg\n"})}),(0,r.jsx)(n.p,{children:"Next, install the Gazebo package repository:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'sudo wget https://packages.osrfoundation.org/gazebo.gpg -O /usr/share/keyrings/pkgs-osrf-archive-keyring.gpg\necho "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/pkgs-osrf-archive-keyring.gpg] http://packages.osrfoundation.org/gazebo/ubuntu-stable $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/gazebo-stable.list > /dev/null\n'})}),(0,r.jsxs)(n.p,{children:["Finally, install ",(0,r.jsx)(n.code,{children:"Gazebo Harmonic"}),":"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"sudo apt update\nsudo apt install gz-harmonic\n"})})]})]}),"\n",(0,r.jsx)(n.h3,{id:"testing",children:"Testing"}),"\n",(0,r.jsx)(n.p,{children:"To test your installation, run the following command:"}),"\n",(0,r.jsxs)(a.A,{groupId:"operating-systems",children:[(0,r.jsxs)(l.A,{value:"macos",label:"macOS",children:[(0,r.jsx)(n.p,{children:"In one terminal, run:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"gz sim -v4 -s shapes.sdf\n"})}),(0,r.jsx)(n.p,{children:"In another terminal, run:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"gz sim -v4 -g\n"})})]}),(0,r.jsxs)(l.A,{value:"ubuntu",label:"Ubuntu",children:[(0,r.jsx)(n.p,{children:"In one terminal, run:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"gz sim -v4 shapes.sdf\n"})}),(0,r.jsx)(n.p,{children:"You should see a window pop up with some 3D objects in it."}),(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsxs)(n.p,{children:["For ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"WSL"})})," users, hardware acceleration (GPU) may not work properly inside of the virtual environment. If your simulation seems laggy, you can try switching to software acceleration (CPU)."]}),(0,r.jsxs)(n.p,{children:["To do so, add the following line to your ",(0,r.jsx)(n.code,{children:"WSL"}),"'s ",(0,r.jsx)(n.code,{children:".zshrc"})," file:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:"export LIBGL_ALWAYS_SOFTWARE=1\n"})}),(0,r.jsxs)(n.p,{children:["Then, source ",(0,r.jsx)(n.code,{children:".zshrc"})," in your ",(0,r.jsx)(n.code,{children:"WSL"})," terminal and restart the simulation."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:"source ~/.zshrc\n"})})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"bluerov2-simulation",children:"BlueROV2 Simulation"}),"\n",(0,r.jsx)(n.h3,{id:"installation-1",children:"Installation"}),"\n",(0,r.jsxs)(n.p,{children:["In this course, you will use a custom simulation for the BlueROV2. To install the simulation, ",(0,r.jsx)(n.strong,{children:"clone the repository onto your macOs, Windows WSL, or Ubuntu machine"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:"git clone https://github.com/blksail-edu/gazebo_bluerov2\n"})}),"\n",(0,r.jsxs)(a.A,{groupId:"operating-systems",children:[(0,r.jsx)(l.A,{value:"macos",label:"macOS",children:(0,r.jsx)(n.p,{children:"Dr. Saad it is your time to shine !"})}),(0,r.jsxs)(l.A,{value:"ubuntu",label:"Ubuntu",children:[(0,r.jsx)(n.p,{children:"Install the following dependencies:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:"sudo apt install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev rapidjson-dev libopencv-dev\n"})}),(0,r.jsxs)(n.p,{children:["Navigate to the ",(0,r.jsx)(n.code,{children:"gazebo_bluerov2"})," repository, and then run the build command:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:"./build.sh\n"})})]})]}),"\n",(0,r.jsx)(n.h3,{id:"testing-1",children:"Testing"}),"\n",(0,r.jsx)(n.p,{children:"After the build is complete, you can start the simulation with:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:"./launch_1x_bluerov2.sh\n"})}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"./"})," in the command is the relative path to the ",(0,r.jsx)(n.code,{children:"build.sh"})," and ",(0,r.jsx)(n.code,{children:"launch.sh"})," files. As is, the above commands only run if your working directory is the ",(0,r.jsx)(n.code,{children:"gaebo_bluerov2"})," directory."]}),(0,r.jsxs)(n.p,{children:["This command ",(0,r.jsx)(n.strong,{children:"MUST"})," be run from inside the ",(0,r.jsx)(n.code,{children:"/gazebo_bluerov2"})," directory."]})]}),"\n",(0,r.jsx)(n.h3,{id:"environment-setup",children:"Environment Setup"}),"\n",(0,r.jsx)(n.p,{children:"Now that you can run the BlueROV2 Gazebo simulation, the Gazebo simulation must be bridged with ROS 2."}),"\n",(0,r.jsx)(n.h4,{id:"raspberry-pi-configuration",children:"Raspberry Pi Configuration"}),"\n",(0,r.jsxs)(n.p,{children:["In a terminal on the ",(0,r.jsx)(n.code,{children:"backseat"}),", install the ",(0,r.jsx)(n.code,{children:"ros_gz_bridge"})," package:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:"sudo apt install ros-jazzy-ros-gz-bridge\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Then, with your favorite text editor, open the ",(0,r.jsx)(n.code,{children:".zshrc"})," file and add the following lines:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:"# Gazebo\nexport GZ_PARTITION=my_sim\nexport GZ_TRANSPORT_IP=192.168.3.2\nexport GZ_TRANSPORT_PUB_PORT=11345\nexport GZ_TRANSPORT_SUB_PORT=11346\nexport GZ_DISCOVERY_SERVER=192.168.3.1\\:11345\n"})}),"\n",(0,r.jsx)(n.p,{children:"These environment variables will help point the Raspberry Pi to the Gazebo simulation."}),"\n",(0,r.jsx)(n.h4,{id:"laptop-configuration",children:"Laptop Configuration"}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsxs)(n.p,{children:["If you are using ",(0,r.jsx)(n.strong,{children:"Windows and WSL"}),", then for this section only, follow the Windows tab rather than the Ubuntu tab."]})}),"\n",(0,r.jsxs)(a.A,{groupId:"operating-systems",children:[(0,r.jsx)(l.A,{value:"macos",label:"macOS",children:(0,r.jsx)(n.admonition,{type:"danger",children:(0,r.jsx)(n.p,{children:"Dr. Saad part two, electric boogaloo !"})})}),(0,r.jsxs)(l.A,{value:"windows",label:"Windows",children:[(0,r.jsxs)(n.p,{children:["You must add similar environment variables to your ",(0,r.jsx)(n.code,{children:"WSL"}),"'s ",(0,r.jsx)(n.code,{children:".zshrc"})," file so that Raspberry Pi and Gazebo simulation can communicate. With your favorite text editor, open the ",(0,r.jsx)(n.code,{children:".zshrc"})," file in ",(0,r.jsx)(n.code,{children:"WSL"})," and add the following lines:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:"# Gazebo\nexport GZ_PARTITION=my_sim\nexport GZ_TRANSPORT_ID=192.168.3.1\nexport GZ_TRANSPORT_PUB_PORT=11345\nexport GZ_TRANSPORT_SUB_PORT=11346\n"})}),(0,r.jsxs)(n.p,{children:["After, source the ",(0,r.jsx)(n.code,{children:".zshrc"})," file:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:"source ~/.zshrc\n"})}),(0,r.jsx)(n.p,{children:"This alone is not enough to enable Gazebo communication between your Raspberry Pi and WSL."}),(0,r.jsx)(n.h5,{id:"wsl-network-mode",children:"WSL Network Mode"}),(0,r.jsx)(n.p,{children:"Since WSL is a virtual machine, it is by default an internal network interface, meaning that the WSL interface is only visible to Windows. To fix this, you can change WSL's network mode to mirrored."}),(0,r.jsxs)(n.p,{children:["In a ",(0,r.jsx)(n.code,{children:"Windows PowerShell"})," terminal, open the ",(0,r.jsx)(n.code,{children:".wslconfig file"}),":"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:"cd\nnotpad .wslconfig\n"})}),(0,r.jsxs)(n.p,{children:["Insert the following lines to change WSL to have a ",(0,r.jsx)(n.code,{children:"mirror"})," network mode, then save and close the file."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:"[wsl2]\nnetworkingMode=mirrored\n"})}),(0,r.jsxs)(n.p,{children:["To apply the changes, shutdown ",(0,r.jsx)(n.code,{children:"WSL"})," from a ",(0,r.jsx)(n.code,{children:"Windows PowerShell"})," terminal:"]}),(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsxs)(n.p,{children:["This will close all running ",(0,r.jsx)(n.code,{children:"WSL"})," terminals in your system."]})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:"wsl --shutdown\n"})}),(0,r.jsxs)(n.p,{children:["After the shutdown, you can open ",(0,r.jsx)(n.code,{children:"WSL"})," again as normal and the changes will be applied. However, you are still not done."]}),(0,r.jsx)(n.h5,{id:"wsl-firewall-access",children:"WSL Firewall Access"}),(0,r.jsxs)(n.p,{children:["Create a new Windows Firewall protocol to enable IPv4 communication between WSL and your Raspberry Pi. In a ",(0,r.jsx)(n.code,{children:"Windows PowerShell"})," terminal, run:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:'New-NetFirewallRule -DisplayName "AUVC Allow ICMPv4 Inbound for WSL2" -Direction Inbound -Protocol ICMPv4 -Action Allow\n'})}),(0,r.jsxs)(n.p,{children:["You can test that this works by pinging your Raspberry Pi. In a ",(0,r.jsx)(n.code,{children:"WSL"})," terminal, run:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:"ping 192.168.2.2\n"})}),(0,r.jsx)(n.p,{children:"Then, create two additional Windows Firewall protocols to allow access to the Gazebo ports:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:'New-NetFirewallRule -DisplayName "AUVC Allow Gazebo Ports 11345-11346 Inbound for WSL2" -Direction Inbound -Protocol UDP -LocalPort 11345-11346 -Action Allow\nNew-NetFirewallRule -DisplayName "AUVC Allow Gazebo Ports 11345-11346 Outbound for WSL2" -Direction Outbound -Protocol UDP -RemotePort 11345-11346 -Action Allow\n'})}),(0,r.jsxs)(n.p,{children:["You can test that this is working by running the Gazebo simulation in a ",(0,r.jsx)(n.code,{children:"WSL"})," terminal, and running the following command from your Raspberry Pi:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:"gz topic -l\n"})}),(0,r.jsxs)(n.p,{children:["You should see a list of Gazebo topics from the Gazebo simulation running in ",(0,r.jsx)(n.code,{children:"WSL"}),"."]})]}),(0,r.jsxs)(l.A,{value:"ubuntu",label:"Ubuntu",children:[(0,r.jsxs)(n.p,{children:["You must add similar environment variables to your ",(0,r.jsx)(n.code,{children:"WSL"}),"'s ",(0,r.jsx)(n.code,{children:".zshrc"})," file so that Raspberry Pi and Gazebo simulation can communicate. With your favorite text editor, open the ",(0,r.jsx)(n.code,{children:".zshrc"})," file in ",(0,r.jsx)(n.code,{children:"WSL"})," and add the following lines:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:"# Gazebo\nexport GZ_PARTITION=my_sim\nexport GZ_TRANSPORT_ID=192.168.3.1\nexport GZ_TRANSPORT_PUB_PORT=11345\nexport GZ_TRANSPORT_SUB_PORT=11346\n"})}),(0,r.jsxs)(n.p,{children:["After, source the ",(0,r.jsx)(n.code,{children:".zshrc"})," file:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:"source ~/.zshrc\n"})}),(0,r.jsxs)(n.p,{children:["You can test that this is working by running the Gazebo simulation in a terminal on your Ubuntu local machine, and running the following command on the ",(0,r.jsx)(n.code,{children:"backseat"}),":"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:"gz topic -l\n"})}),(0,r.jsx)(n.p,{children:"You should see a list of Gazebo topics from the Gazebo simulation."})]})]}),"\n",(0,r.jsx)(n.h2,{id:""}),"\n",(0,r.jsx)(n.h2,{id:"ros-2-gazebo-bridge",children:"ROS 2 Gazebo Bridge"}),"\n",(0,r.jsxs)(n.p,{children:["To communicate with the BlueROV2 simulation, you will use the ",(0,r.jsx)(n.code,{children:"ros_gz_bridge"})," package. The ",(0,r.jsx)(n.code,{children:"rosmav"})," package contains a launch file that is already configured for both our single-rov and double-rov simulations."]}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsx)(n.p,{children:"The bidge node should be started after the Gazebo simulations to ensure it functions properly."})}),"\n",(0,r.jsxs)(n.p,{children:["To start the bridge, run the following command in a terminal on the ",(0,r.jsx)(n.code,{children:"backseat"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:"ros2 launch rosmav bridge.launch.py\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This node will convert Gazebo messages to ROS 2 messages for crucial onboard components like the camera, IMU, magnetometer/compass. It is also configured for thruster manual inputs; however, we ",(0,r.jsx)(n.strong,{children:"WILL NOT"})," be using these to control the ROV(s)."]}),"\n",(0,r.jsx)(n.h2,{id:"ardusub-with-gazebo",children:"ArduSub with Gazebo"}),"\n",(0,r.jsxs)(n.p,{children:["To control the BlueROV2 in the Gazebo simulation, you will use the ",(0,r.jsx)(n.code,{children:"rosmav"})," package to establish a ",(0,r.jsx)(n.code,{children:"MAVLINK"})," connection instances of the ",(0,r.jsx)(n.code,{children:"SITL"}),". The ",(0,r.jsx)(n.code,{children:"SITL"})," will then control the BlueROV2 inside of the Gazebo world. Each simulated vehicle in the Gazebo world must use a different port for the ",(0,r.jsx)(n.code,{children:"SITL"}),"."]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["When we used the ",(0,r.jsx)(n.code,{children:"SITL"})," with ",(0,r.jsx)(n.code,{children:"QGroundControl"}),", we used port ",(0,r.jsx)(n.code,{children:"14550"}),". This port is specific to ",(0,r.jsx)(n.code,{children:"QGroundControl"})," and will not be used while running Gazebo simulation."]})}),"\n",(0,r.jsx)(n.h3,{id:"simulating-1x-rov",children:"Simulating 1x ROV"}),"\n",(0,r.jsxs)(n.p,{children:["In the ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"launch_1z_bluerov2.sh"})})," file, a Gazebo sim is started containing a single BlueROV2 that uses ",(0,r.jsx)(n.strong,{children:"port"})," ",(0,r.jsx)(n.strong,{children:"9002"})," for ",(0,r.jsx)(n.code,{children:"MAVLINK"}),". To connect to this vehicle with the ",(0,r.jsx)(n.code,{children:"SITL"}),", the port must be changed to ",(0,r.jsx)(n.code,{children:"9002"}),". The command below also adds the argument ",(0,r.jsx)(n.code,{children:"-I 0"}),", indicating that this ",(0,r.jsx)(n.code,{children:"SITL"})," is instance 0."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:'~/ardupilot/Tools/autotest/sim_vehicle.py --vehicle=ArduSub --aircraft="bwsibot" -L RATBeach --out=udp:192.168.3.1:9002 -I 0\n'})}),"\n",(0,r.jsx)(n.h3,{id:"simulating-2x-rov",children:"Simulating 2x ROV"}),"\n",(0,r.jsxs)(n.p,{children:["In the ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"launch_2x_bluerov2.sh"})})," file, a Gazebo sim is started containing two BlueROV2s that use ",(0,r.jsx)(n.strong,{children:"ports"})," ",(0,r.jsx)(n.strong,{children:"9002"})," and ",(0,r.jsx)(n.strong,{children:"9012"}),", respectively. To connect to these vehicles with the ",(0,r.jsx)(n.code,{children:"SITL"}),", two instances must be started in separate terminals."]}),"\n",(0,r.jsx)(n.p,{children:"In the first terminal, you can run:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:'~/ardupilot/Tools/autotest/sim_vehicle.py --vehicle=ArduSub --aircraft="bwsibot" -L RATBeach --out=udp:192.168.3.1:9002 -I 0\n'})}),"\n",(0,r.jsx)(n.p,{children:"In the second terminal, you will run:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zsh",children:'~/ardupilot/Tools/autotest/sim_vehicle.py --vehicle=ArduSub --aircraft="bwsibot" -L RATBeach --out=udp:192.168.3.1:9012 -I 1\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["Notice how the port and instance indices change between each command. These link each ",(0,r.jsx)(n.code,{children:"SITL"})," instance to the corresponding BlueROV2 model in the Gazebo world."]})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);