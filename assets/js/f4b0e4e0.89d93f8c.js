"use strict";(self.webpackChunkblksail_edu_github_io=self.webpackChunkblksail_edu_github_io||[]).push([[8561],{4137:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>h});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,l=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=s(a),u=i,h=m["".concat(p,".").concat(u)]||m[u]||d[u]||l;return a?n.createElement(h,r(r({ref:t},c),{},{components:a})):n.createElement(h,r({ref:t},c))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=a.length,r=new Array(l);r[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[m]="string"==typeof e?e:i,r[1]=o;for(var s=2;s<l;s++)r[s]=a[s];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},7063:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var n=a(7462),i=(a(7294),a(4137));const l={sidebar_position:10},r="Computer Vision",o={unversionedId:"module/vision",id:"module/vision",title:"Computer Vision",description:"The BlueROV2 is equipped with a forward-facing camera on a gimbal.",source:"@site/docs/2-module/vision.mdx",sourceDirName:"2-module",slug:"/module/vision",permalink:"/docs/module/vision",draft:!1,editUrl:"https://github.com/blksail-edu/blksail-edu.github.io/tree/main/docs/2-module/vision.mdx",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Motor Control",permalink:"/docs/module/motor_commands"},next:{title:"Troubleshooting",permalink:"/docs/category/troubleshooting"}},p={},s=[{value:"OpenCV",id:"opencv",level:2},{value:"Installation",id:"installation",level:3},{value:"Reading Images",id:"reading-images",level:3},{value:"Reading Videos",id:"reading-videos",level:3},{value:"Drawing on Images",id:"drawing-on-images",level:3},{value:"Line Detection",id:"line-detection",level:2},{value:"Hough Transform",id:"hough-transform",level:3},{value:"Probabilistic Hough Transform",id:"probabilistic-hough-transform",level:3},{value:"Example",id:"example",level:3},{value:"April Tags",id:"april-tags",level:2},{value:"Installation",id:"installation-1",level:3},{value:"Example",id:"example-1",level:3}],c={toc:s},m="wrapper";function d(e){let{components:t,...l}=e;return(0,i.kt)(m,(0,n.Z)({},c,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"computer-vision"},"Computer Vision"),(0,i.kt)("p",null,"The BlueROV2 is equipped with a forward-facing camera on a gimbal.\nWe will be using this camera to detect objects in the water."),(0,i.kt)("h2",{id:"opencv"},"OpenCV"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://opencv.org/"},"OpenCV")," is a library of programming functions mainly aimed at real-time computer vision.\nIt is open-source and free for commercial use.\nIt is written in C++ and has bindings for Python."),(0,i.kt)("h3",{id:"installation"},"Installation"),(0,i.kt)("p",null,"On the backseat computer, we will be using ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/opencv/opencv-python"},"OpenCV with Python"),"."),(0,i.kt)("p",null,"Create a new virtual environment and install OpenCV:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mkvirtualenv -p python3 opencv\nworkon bluecv\npip install opencv-python-headless\n")),(0,i.kt)("p",null,"Now, in the home directory, create a new folder called ",(0,i.kt)("inlineCode",{parentName:"p"},"bluecv")," and create a new file called ",(0,i.kt)("inlineCode",{parentName:"p"},"test.ipynb"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir bluecv\ncd bluecv\ntouch test.ipynb\n")),(0,i.kt)("p",null,"Open the file in VSCode and add the following code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"import cv2\nimport numpy as np\nimport matplotlib.pyplot as plt\n")),(0,i.kt)("p",null,"Run the code and make sure it works."),(0,i.kt)("h3",{id:"reading-images"},"Reading Images"),(0,i.kt)("p",null,"To read an image, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"imread")," function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"img = cv2.imread('image.jpg')\n")),(0,i.kt)("p",null,"The image is stored as a NumPy array.\nTo display the image, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"imshow")," function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"plt.imshow(img)\n")),(0,i.kt)("h3",{id:"reading-videos"},"Reading Videos"),(0,i.kt)("p",null,"To read a video, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"VideoCapture")," function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"cap = cv2.VideoCapture('video.mp4')\n")),(0,i.kt)("p",null,"To read the video frame by frame, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"read")," function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"ret, frame = cap.read()\n")),(0,i.kt)("h3",{id:"drawing-on-images"},"Drawing on Images"),(0,i.kt)("p",null,"To draw a line on an image, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"line")," function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"cv2.line(img, (0, 0), (100, 100), (255, 0, 0), 5)\n")),(0,i.kt)("p",null,"To draw a rectangle on an image, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"rectangle")," function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"cv2.rectangle(img, (0, 0), (100, 100), (0, 255, 0), 5)\n")),(0,i.kt)("p",null,"To draw a circle on an image, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"circle")," function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"cv2.circle(img, (50, 50), 50, (0, 0, 255), 5)\n")),(0,i.kt)("p",null,"To draw a polygon on an image, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"polylines")," function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"pts = np.array([[10, 5], [20, 30], [70, 20], [50, 10]], np.int32)\npts = pts.reshape((-1, 1, 2))\ncv2.polylines(img, [pts], True, (0, 255, 255), 5)\n")),(0,i.kt)("p",null,"To draw text on an image, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"putText")," function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"cv2.putText(img, 'Hello World!', (0, 130), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2, cv2.LINE_AA)\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Visualize the image using ",(0,i.kt)("inlineCode",{parentName:"p"},"plt.imshow(img)")," after each drawing operation to see the result.")),(0,i.kt)("h2",{id:"line-detection"},"Line Detection"),(0,i.kt)("h3",{id:"hough-transform"},"Hough Transform"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Hough_transform"},"Hough transform")," is a feature extraction technique used in image analysis, computer vision, and digital image processing.\nThe purpose of the technique is to find imperfect instances of objects within a certain class of shapes by a voting procedure."),(0,i.kt)("h3",{id:"probabilistic-hough-transform"},"Probabilistic Hough Transform"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://docs.opencv.org/3.4/d9/db0/tutorial_hough_lines.html"},"probabilistic Hough transform")," is an optimization of the Hough transform.\nIt is a straight line detection method.\nIt returns the start and end points of the detected lines."),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) # convert to grayscale\nedges = cv2.Canny(gray, 50, 150, apertureSize=3) # detect edges\nlines = cv2.HoughLinesP(\n                edges,\n                1,\n                np.pi/180,\n                100,\n                minLineLength=100,\n                maxLineGap=10,\n        ) # detect lines\n\nfor line in lines:\n    x1, y1, x2, y2 = line[0]\n    cv2.line(img, (x1, y1), (x2, y2), (0, 255, 0), 2)\n\nplt.imshow(img)\n")),(0,i.kt)("admonition",{title:"Check-Off",type:"warning"},(0,i.kt)("ul",{parentName:"admonition",className:"contains-task-list"},(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Run the code above and make sure it works."),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","What do the parameters of the ",(0,i.kt)("inlineCode",{parentName:"li"},"HoughLinesP")," function do?"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","What happens if you change the parameters?"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","What happens if you change the ",(0,i.kt)("inlineCode",{parentName:"li"},"minLineLength")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"maxLineGap")," parameters?"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","What happens if you change the ",(0,i.kt)("inlineCode",{parentName:"li"},"apertureSize")," parameter of the ",(0,i.kt)("inlineCode",{parentName:"li"},"Canny")," function?"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","What happens if you change the ",(0,i.kt)("inlineCode",{parentName:"li"},"threshold1")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"threshold2")," parameters of the ",(0,i.kt)("inlineCode",{parentName:"li"},"Canny")," function?"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Modify the code to detect pool lanes."))),(0,i.kt)("h2",{id:"april-tags"},"April Tags"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://april.eecs.umich.edu/software/apriltag.html"},"AprilTags")," are a type of fiducial marker.\nThey are designed to be easily detected by computer vision algorithms.\nThey are used in robotics for localization and navigation."),(0,i.kt)("h3",{id:"installation-1"},"Installation"),(0,i.kt)("p",null,"On the backseat computer, we will be using ","[Python bindings for the Apriltags 3 library by Duckietown]","(\n](",(0,i.kt)("a",{parentName:"p",href:"https://github.com/duckietown/lib-dt-apriltags"},"https://github.com/duckietown/lib-dt-apriltags"),")"),(0,i.kt)("p",null,"In the same virtual environment as before, install the library:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"pip install dt-apriltags\n")),(0,i.kt)("h3",{id:"example-1"},"Example"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/duckietown/lib-dt-apriltags/daffy/test/test_files/test_image.png",alt:"Example"})),(0,i.kt)("p",null,"Download the image above and save it as ",(0,i.kt)("inlineCode",{parentName:"p"},"test_image.png"),".\nIn a terminal, run the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"wget https://raw.githubusercontent.com/duckietown/lib-dt-apriltags/daffy/test/test_files/test_image.png\n")),(0,i.kt)("p",null,"Back in the Jupyter notebook, add the following code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from dt_apriltags import Detector\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"img = cv2.imread('test_image.png', cv2.IMREAD_GRAYSCALE)\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"at_detector = Detector(families='tag36h11',\n                       nthreads=1,\n                       quad_decimate=1.0,\n                       quad_sigma=0.0,\n                       refine_edges=1,\n                       decode_sharpening=0.25,\n                       debug=0)\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"tags = at_detector.detect(img, estimate_tag_pose=False, camera_params=None, tag_size=None)\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"color_img = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"for tag in tags:\n    for idx in range(len(tag.corners)):\n        cv2.line(color_img, tuple(tag.corners[idx - 1, :].astype(int)), tuple(tag.corners[idx, :].astype(int)), (0, 255, 0))\n\n    cv2.putText(color_img, str(tag.tag_id),\n                org=(tag.corners[0, 0].astype(int) + 10, tag.corners[0, 1].astype(int) + 10),\n                fontFace=cv2.FONT_HERSHEY_SIMPLEX,\n                fontScale=0.8,\n                color=(0, 0, 255))\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"plt.imshow(img)\n")),(0,i.kt)("p",null,"The result should look like this:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Result",src:a(7667).Z,width:"548",height:"418"})),(0,i.kt)("admonition",{title:"Check-Off",type:"warning"},(0,i.kt)("ul",{parentName:"admonition",className:"contains-task-list"},(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Run the code above and make sure it works."),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","What do the parameters of the ",(0,i.kt)("inlineCode",{parentName:"li"},"Detector")," function do?"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","What happens if you change the parameters?"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","What are ",(0,i.kt)("inlineCode",{parentName:"li"},"families"),"?"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","What does ",(0,i.kt)("inlineCode",{parentName:"li"},"estimate_tag_pose")," do?"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","What does ",(0,i.kt)("inlineCode",{parentName:"li"},"camera_params")," do?"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","What does ",(0,i.kt)("inlineCode",{parentName:"li"},"tag_size")," do?"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","The ",(0,i.kt)("inlineCode",{parentName:"li"},"detect")," function returns a list of tags.\nWhat information does each tag contain?"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Modify the code to give the position and orientation of each tag."))))}d.isMDXComponent=!0},7667:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/apriltags_detected-26139bd3bf25abbbdc48c35b5613e83e.png"}}]);