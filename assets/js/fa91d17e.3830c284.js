"use strict";(self.webpackChunkblksail_edu_github_io=self.webpackChunkblksail_edu_github_io||[]).push([[9355],{9534:(o,e,t)=>{t.r(e),t.d(e,{assets:()=>a,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var n=t(4848),r=t(8453);const s={sidebar_position:4},i="Open-Loop Control",l={id:"module/open_loop_control",title:"Open-Loop Control",description:"Introduction",source:"@site/docs/2-module/4_open_loop_control.mdx",sourceDirName:"2-module",slug:"/module/open_loop_control",permalink:"/docs/module/open_loop_control",draft:!1,unlisted:!1,editUrl:"https://github.com/blksail-edu/blksail-edu.github.io/tree/main/docs/2-module/4_open_loop_control.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Remote Operations",permalink:"/docs/module/remote_operations"},next:{title:"Software-in-the-loop Simulation",permalink:"/docs/module/sil_sim"}},a={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Open-loop vs. Closed-loop Control",id:"open-loop-vs-closed-loop-control",level:2},{value:"Open-loop Control",id:"open-loop-control-1",level:3}];function d(o){const e={a:"a",blockquote:"blockquote",h1:"h1",h2:"h2",h3:"h3",p:"p",...(0,r.R)(),...o.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{id:"open-loop-control",children:"Open-Loop Control"}),"\n",(0,n.jsx)(e.h2,{id:"introduction",children:"Introduction"}),"\n",(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:"https://en.wikipedia.org/wiki/Control_theory",children:"Control theory"})," is a branch of mathematics that deals with the control of continuously operating dynamical systems in engineered processes and machines.\nThe objective is to develop a control model for controlling such systems using a control action in an optimum manner without delay or overshoot and ensuring control stability."]}),"\n",(0,n.jsx)(e.p,{children:"To do this, a controller with the requisite corrective behavior is required."}),"\n",(0,n.jsx)(e.p,{children:"In robotics, control theory is used to design controllers that can make robots perform desired tasks.\nUsing the robot's sensors, the controller can determine the robot's current state and send commands to the robot's actuators to make it perform a desired task."}),"\n",(0,n.jsxs)(e.blockquote,{children:["\n",(0,n.jsxs)(e.p,{children:['"Sense, plan, act." - ',(0,n.jsx)(e.a,{href:"https://en.wikipedia.org/wiki/Rodney_Brooks",children:"Rodney Brooks"})]}),"\n"]}),"\n",(0,n.jsx)(e.h2,{id:"open-loop-vs-closed-loop-control",children:"Open-loop vs. Closed-loop Control"}),"\n",(0,n.jsx)(e.p,{children:"There are two main types of control systems: open-loop and closed-loop."}),"\n",(0,n.jsx)(e.h3,{id:"open-loop-control-1",children:"Open-loop Control"}),"\n",(0,n.jsxs)(e.p,{children:["In an ",(0,n.jsx)(e.a,{href:"https://en.wikipedia.org/wiki/Open-loop_controller",children:"open-loop control"})," system, the control action from the controller is independent of the process variable.\nThe process variable is the variable that is being controlled.\nThe control action is the output of the controller that is sent to the system."]}),"\n",(0,n.jsx)(e.p,{children:"An example of an open-loop control system is an electric toaster.\nThe toaster is turned on and operates for a predetermined time.\nThe input is the button that is pressed to turn the toaster on, and the output is the amount of time the toaster stays on.\nThere is no sensing of the toast temperature.\nAs a result, the toaster provides the same output for any given input (i.e. the toaster provides the same amount of toasting for each button selection)."}),"\n",(0,n.jsx)(e.p,{children:"When you programmed your robot choreography, you used open-loop control.\nYou programmed the robot to move for a certain amount of time, but the robot did not sense its environment and adjust its motion accordingly."})]})}function p(o={}){const{wrapper:e}={...(0,r.R)(),...o.components};return e?(0,n.jsx)(e,{...o,children:(0,n.jsx)(d,{...o})}):d(o)}},8453:(o,e,t)=>{t.d(e,{R:()=>i,x:()=>l});var n=t(6540);const r={},s=n.createContext(r);function i(o){const e=n.useContext(s);return n.useMemo((function(){return"function"==typeof o?o(e):{...e,...o}}),[e,o])}function l(o){let e;return e=o.disableParentContext?"function"==typeof o.components?o.components(r):o.components||r:i(o.components),n.createElement(s.Provider,{value:e},o.children)}}}]);