"use strict";(self.webpackChunkblksail_edu_github_io=self.webpackChunkblksail_edu_github_io||[]).push([[5511],{4137:(e,t,o)=>{o.d(t,{Zo:()=>h,kt:()=>m});var n=o(7294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},h=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),p=c(o),u=r,m=p["".concat(s,".").concat(u)]||p[u]||d[u]||a;return o?n.createElement(m,i(i({ref:t},h),{},{components:o})):n.createElement(m,i({ref:t},h))}));function m(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=o.length,i=new Array(a);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<a;c++)i[c]=o[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,o)}u.displayName="MDXCreateElement"},1172:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var n=o(7462),r=(o(7294),o(4137));const a={sidebar_position:1},i="Motor Control",l={unversionedId:"module/motor_commands",id:"module/motor_commands",title:"Motor Control",description:"Introduction",source:"@site/docs/2-module/motor_commands.mdx",sourceDirName:"2-module",slug:"/module/motor_commands",permalink:"/docs/module/motor_commands",draft:!1,editUrl:"https://github.com/blksail-edu/blksail-edu.github.io/tree/main/docs/2-module/motor_commands.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Module 2 - Controlling the Robot",permalink:"/docs/category/module-2---controlling-the-robot"},next:{title:"Computer Vision",permalink:"/docs/module/vision"}},s={},c=[{value:"Introduction",id:"introduction",level:2},{value:"ESCs",id:"escs",level:2},{value:"Motors",id:"motors",level:2},{value:"Flight Controller",id:"flight-controller",level:2},{value:"Raspberry Pi (Onboard Computer)",id:"raspberry-pi-onboard-computer",level:2},{value:"Controlling the Motors from the autonomy computer",id:"controlling-the-motors-from-the-autonomy-computer",level:2},{value:"Setting up the autonomy computer",id:"setting-up-the-autonomy-computer",level:3},{value:"Fixing the IP address",id:"fixing-the-ip-address",level:4},{value:"Testing the connection",id:"testing-the-connection",level:4}],h={toc:c},p="wrapper";function d(e){let{components:t,...o}=e;return(0,r.kt)(p,(0,n.Z)({},h,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"motor-control"},"Motor Control"),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"The motors used in the robot are brushless DC motors.\nThese motors are controlled by a Electronic Speed Controller (ESC).\nThe ESCs are controlled by the flight controller, which in turn is controlled by the Raspberry Pi."),(0,r.kt)("mermaid",{value:"graph LR\n    RPI[Raspberry Pi] --\x3e FC[Flight Controller]\n    FC[Flight Controller] --\x3e E1[ESC 1]\n    FC --\x3e E2[ESC 2]\n    FC --\x3e E3[ESC 3]\n    FC --\x3e E4[ESC 4]\n    FC --\x3e E5[ESC 5]\n    FC --\x3e E6[ESC 6]\n    E1 --\x3e M1[Motor 1]\n    E2 --\x3e M2[Motor 2]\n    E3 --\x3e M3[Motor 3]\n    E4 --\x3e M4[Motor 4]\n    E5 --\x3e M5[Motor 5]\n    E6 --\x3e M6[Motor 6]"}),(0,r.kt)("h2",{id:"escs"},"ESCs"),(0,r.kt)("p",null,"The ESCs receive a Pulse Width Modulation (PWM) signal from the flight controller.\nThis is a signal that is sent at a fixed frequency, but the duty cycle of the signal is varied.\nThe duty cycle is the percentage of the time that the signal is high.\nThe ESCs use this signal to determine the speed of the motor.\nThis is common is RC applications, and is the same way that servos are controlled, see ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Servo_control"},"Servo Control - Wikipedia")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://upload.wikimedia.org/wikipedia/commons/6/6c/Servomotor_Timing_Diagram.svg",alt:"PWM Signal"})),(0,r.kt)("p",null,"The ESCs are connected to the flight controller using a 3 pin connector.\nThe pins are labelled as follows:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"GND")," - Ground"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"5V")," - 5V power supply"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"S")," - Signal")),(0,r.kt)("h2",{id:"motors"},"Motors"),(0,r.kt)("p",null,"The motors are brushless DC motors.\nA brushless DC motor is a synchronous electric motor which is powered by direct-current electricity (DC) and which has an electronically controlled commutation system, instead of a mechanical commutation system based on brushes.\nIn such motors, current and torque, voltage and rpm are linearly related."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://upload.wikimedia.org/wikipedia/commons/2/2e/Floppy_drive_spindle_motor_open.jpg",alt:"Brushless DC Motor"})),(0,r.kt)("p",null,"We can control the speed of the motor by varying the voltage applied to the motor.\nThe ESCs do this for us, and we can control the speed of the motor by varying the duty cycle of the PWM signal."),(0,r.kt)("h2",{id:"flight-controller"},"Flight Controller"),(0,r.kt)("p",null,"The flight controller is a device that is used to control the motors.\nIt is a microcontroller that is designed to be used in drones.\nIt has a number of sensors that are used to determine the orientation of the drone.\nIt then uses this information to control the motors."),(0,r.kt)("p",null,"The BlueROV2 uses a Pixhawk flight controller."),(0,r.kt)("p",null,"The flight controller is connected to the Raspberry Pi using a serial connection.\nThe Raspberry Pi sends commands to the flight controller, and the flight controller sends back information about the sensors.\nIt uses the ",(0,r.kt)("a",{parentName:"p",href:"https://mavlink.io/en/"},"MAVLink")," protocol to communicate with the Raspberry Pi."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"In this section, we will use the flight controller to control the motors.\nWe will be ignoring the sensors on the flight controller, and will be using the Raspberry Pi to control the flight controller.")),(0,r.kt)("h2",{id:"raspberry-pi-onboard-computer"},"Raspberry Pi (Onboard Computer)"),(0,r.kt)("p",null,"The Raspberry Pi inside the BlueROV2 is used to control the flight controller.\n(We will call this the onboard Raspberry Pi.)\nIt is running a program called ",(0,r.kt)("a",{parentName:"p",href:"https://www.ardusub.com/"},"ArduSub")," alongside a set of other programs as ",(0,r.kt)("a",{parentName:"p",href:"https://docs.bluerobotics.com/ardusub-zola/software/onboard/BlueOS-1.1/"},"BlueOS"),"\nArduSub is a program that is designed to control underwater vehicles.\nIt is based on the ",(0,r.kt)("a",{parentName:"p",href:"https://ardupilot.org/"},"ArduPilot")," project, which is a program that is designed to control aerial vehicles."),(0,r.kt)("p",null,"From your RPi (the autonomy computer moving forward), you can control the motors by sending commands to the flight controller.\nYou can do this by sending MAVLink commands to the flight controller.\nWe will be using the python library ",(0,r.kt)("a",{parentName:"p",href:"https://www.ardusub.com/developers/pymavlink.html"},"pymavlink")," to do this."),(0,r.kt)("h2",{id:"controlling-the-motors-from-the-autonomy-computer"},"Controlling the Motors from the autonomy computer"),(0,r.kt)("h3",{id:"setting-up-the-autonomy-computer"},"Setting up the autonomy computer"),(0,r.kt)("h4",{id:"fixing-the-ip-address"},"Fixing the IP address"),(0,r.kt)("p",null,"The onboard computer has a static IP address of ",(0,r.kt)("inlineCode",{parentName:"p"},"192.168.2.2"),".\nThis means that the IP address will not change.\nIt is expecting that any computer it will be communicating with will have an IP address of ",(0,r.kt)("inlineCode",{parentName:"p"},"192.168.2.1"),"."),(0,r.kt)("p",null,"The autonomy computer is currently set up to use ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol"},"DHCP")," to get an IP address.\nThis means that the IP address of the autonomy computer will change every time it is restarted.\nWe need to change this so that the IP address of the autonomy computer is always ",(0,r.kt)("inlineCode",{parentName:"p"},"192.168.2.1"),".\nTo do this, we need to edit the file ",(0,r.kt)("inlineCode",{parentName:"p"},"/etc/dhcpcd.conf"),"."),(0,r.kt)("p",null,"First, let's find the network interface that connects to the onboard computer.\nWith the inteface disconnected, run the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ip addr\n")),(0,r.kt)("p",null,"This will show you a list of all the network interfaces on the computer.\nNow connect the interface to the onboard computer, and run the command again.\nYou should see a new interface appear.\nTake note of the name of this interface."),(0,r.kt)("p",null,"Now we can edit the ",(0,r.kt)("inlineCode",{parentName:"p"},"/etc/dhcpcd.conf")," file.\nYou can do this by running the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo nano /etc/dhcpcd.conf\n")),(0,r.kt)("p",null,"This will open the file in the ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/GNU_nano"},(0,r.kt)("inlineCode",{parentName:"a"},"nano"))," text editor.\nYou can then add the following lines to the end of the file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"interface <INTERFACE_NAME>\nstatic ip_address=192.168.2.1/24\n")),(0,r.kt)("p",null,"Where ",(0,r.kt)("inlineCode",{parentName:"p"},"<INTERFACE_NAME>")," is the name of the interface that you found earlier."),(0,r.kt)("p",null,"Now save the file by pressing ",(0,r.kt)("inlineCode",{parentName:"p"},"Ctrl + X"),", then ",(0,r.kt)("inlineCode",{parentName:"p"},"Y"),", then ",(0,r.kt)("inlineCode",{parentName:"p"},"Enter"),"."),(0,r.kt)("p",null,"Once you have done this, you can restart the ",(0,r.kt)("inlineCode",{parentName:"p"},"dhcpd")," service by running the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo systemctl restart dhcpcd\n")),(0,r.kt)("p",null,"Now, if you run the ",(0,r.kt)("inlineCode",{parentName:"p"},"ip addr")," command again, you should see that the IP address of the interface is ",(0,r.kt)("inlineCode",{parentName:"p"},"192.168.2.1"),".\nYou should also be able to ping the onboard computer by running the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ping 192.168.2.2\n")),(0,r.kt)("h4",{id:"testing-the-connection"},"Testing the connection"),(0,r.kt)("p",null,"Now that we have set up the IP address, we can test the connection to the onboard computer."),(0,r.kt)("p",null,"Go ahead and fork the following repository: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/blksail-edu/simple-web-control"},"Simple Web Control")),(0,r.kt)("p",null,"Then clone the repository onto the autonomy computer.\nYou can do this by running the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone <YOUR_FORK_URL>\n")),(0,r.kt)("p",null,"Then create a virtualenv, and install the dependencies by running the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"mkvirtualenv simple-web-control\ncd simple-web-control\npip install -r requirements.txt\n")),(0,r.kt)("p",null,"Now you can run the program by running the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"python sliders.py\n")))}d.isMDXComponent=!0}}]);